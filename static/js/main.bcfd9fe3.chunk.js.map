{"version":3,"sources":["app/components/TheTable/TheTable.tsx","app/components/TheRadioButton/TheRadioButton.tsx","app/components/TheInput/TheInput.tsx","app/constants/index.tsx","app/services/InterceptorService.js","app/services/ApiService.js","app/services/HttpService.js","features/repositories/repositorySlice.tsx","features/repositories/Repositories.tsx","app/router/index.tsx","app/components/TheSidebar/TheSidebar.tsx","App.tsx","app/store/store.ts","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","size","height","width","root","backgroundColor","boxShadow","TheTable","props","rows","columns","pageSize","handleModelChange","classes","className","onSortModelChange","sortingOrder","sortingMode","disableColumnSelector","disableColumnMenu","TheRadioButton","list","value","title","handleChange","FormControl","component","RadioGroup","row","aria-label","onChange","data-testid","map","item","FormControlLabel","control","Radio","label","id","margin","spacing","marginTop","marginBottom","borderRadius","padding","TheInput","style","display","justifyContent","noValidate","autoComplete","TextField","inputProps","variant","langList","tableColumns","field","headerName","sortable","Interceptor","axiosObject","this","requestInterceptor","responseInterceptor","interceptors","request","use","config","error","Promise","reject","response","eject","githubApi","options","instance","axios","create","interceptor","setRequestInterceptor","setResponseInterceptor","url","a","get","data","payload","post","baseURL","fetchRepoByQuery","createAsyncThunk","isLoading","query","language","items","filterList","repositoryId","userName","owner","login","repoDescription","description","stars","stargazers_count","forks_count","updated_at","dayjs","format","fetchRepoBySort","sort","order","repositorySlice","createSlice","name","initialState","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","repoList","Repositories","useSelector","loading","useState","radioValue","setValue","text","setText","dispatch","useDispatch","handleInputChange","useDebouncedCallback","event","target","maxWait","useCallback","params","length","useEffect","routes","to","path","icon","TheSidebar","open","setOpen","isOpen","onStateChange","pageWrapId","index","pathname","onClick","App","store","configureStore","reducer","repositoryReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2SAiBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,KAAM,CACFC,OAAQ,IACRC,MAAO,QAEXC,KAAM,CACFC,gBAAiB,OACjBC,UAAW,6KAIJ,SAASC,EAASC,GAAmB,IACxCC,EAA+CD,EAA/CC,KAAMC,EAAyCF,EAAzCE,QAASC,EAAgCH,EAAhCG,SAAUC,EAAsBJ,EAAtBI,kBAE3BC,EAAUf,IAGhB,OACI,qBAAKgB,UAAWD,EAAQZ,KAAxB,SACI,cAAC,IAAD,CACIa,UAAWD,EAAQT,KACnBK,KAAMA,EACNC,QAASA,EACTC,SAAUA,EACVI,kBAAmBH,EACnBI,aAAc,CAAC,MAAO,QACtBC,YAAY,SACZC,uBAAqB,EACrBC,mBAAiB,M,uCC5BlB,SAASC,EAAeZ,GAAe,IAE1Ca,EAAqCb,EAArCa,KAAMC,EAA+Bd,EAA/Bc,MAAOC,EAAwBf,EAAxBe,MAAOC,EAAiBhB,EAAjBgB,aAE5B,OACI,cAACC,EAAA,EAAD,CAAaC,UAAU,WAAvB,SACI,cAACC,EAAA,EAAD,CAAYC,KAAG,EAACC,aAAYN,EAAOD,MAAOA,EAAOQ,SAAUN,EAAcO,cAAY,mBAArF,SACKV,EAAKW,KAAI,SAACC,GAAD,OACN,cAACC,EAAA,EAAD,CAAgCZ,MAAOW,EAAKX,MAAOa,QAAS,cAACC,EAAA,EAAD,IAAWC,MAAOJ,EAAKX,OAA5DW,EAAKK,W,aCrB1CxC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCI,KAAM,CACF,QAAS,CACLmC,OAAQvC,EAAMwC,QAAQ,GACtBrC,MAAO,QAEXE,gBAAiB,OACjBoC,UAAW,EACXC,aAAc,GACdC,aAAc,EACdC,QAAS,OAIF,SAASC,EAASrC,GAC7B,IAAMK,EAAUf,IAEhB,OACI,qBAAKgD,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAA/C,SACI,sBAAMlC,UAAWD,EAAQT,KAAM6C,YAAU,EAACC,aAAa,MAAvD,SACI,cAACC,EAAA,EAAD,CAAWC,WAAY,CAAE,cAAe,iBACpCrB,cAAY,YAAYM,MAAM,cAAcgB,QAAQ,WAAWvB,SAAUtB,EAAMgB,mB,aCzBtF8B,EAAW,CACpB,CACIhB,GAAI,EACJhB,MAAO,cAEX,CACIgB,GAAI,EACJhB,MAAO,UAEX,CACIgB,GAAI,EACJhB,MAAO,UAIFiC,EAAe,CACxB,CACIC,MAAO,eACPC,WAAY,gBACZtD,MAAO,IACPuD,UAAU,GAEd,CACIF,MAAO,WACPC,WAAY,WACZtD,MAAO,IACPuD,UAAU,GAEd,CACIF,MAAO,kBACPC,WAAY,mBACZtD,MAAO,IACPuD,UAAU,GAEd,CACIF,MAAO,QACPC,WAAY,QACZtD,MAAO,KAEX,CACIqD,MAAO,cACPC,WAAY,QACZtD,MAAO,KAEX,CACIqD,MAAO,aACPC,WAAY,mBACZtD,MAAO,M,mEC/CMwD,E,WACnB,WAAYC,GAAc,oBACxBC,KAAKC,mBAAqB,KAC1BD,KAAKE,oBAAsB,KAC3BF,KAAKD,YAAcA,E,yDAGrB,WACEC,KAAKC,mBAAqBD,KAAKD,YAAYI,aAAaC,QAAQC,KAC9D,SAACC,GAAD,OAAYA,KACZ,SAACC,GAAD,OAAWC,QAAQC,OAAOF,Q,oCAI9B,WACEP,KAAKE,oBAAsBF,KAAKD,YAAYI,aAAaO,SAASL,KAChE,SAACK,GAAD,OAAcA,KACd,gBAAaH,EAAb,EAAGG,SAAH,OAAyBF,QAAQC,OAAOF,Q,sCAI5C,WACEP,KAAKD,YAAYI,aAAaC,QAAQO,MAAMX,KAAKC,sB,uCAGnD,WACED,KAAKD,YAAYI,aAAaO,SAASC,MAAMX,KAAKE,yB,KCtBzCU,EAAY,I,WCCvB,WAAYC,GAAU,oBACpBb,KAAKc,SAAWC,IAAMC,OAAOH,GAC7Bb,KAAKiB,YAAc,IAAInB,EAAYE,KAAKc,UAExCd,KAAKiB,YAAYC,wBACjBlB,KAAKiB,YAAYE,yB,8EAGnB,WAAUC,EAAKd,GAAf,iBAAAe,EAAA,sEACyBrB,KAAKc,SAASQ,IAAIF,EAAKd,GADhD,uBACUiB,EADV,EACUA,KADV,kBAESA,GAFT,gD,kHAKA,WAAWH,EAAKI,EAASlB,GAAzB,iBAAAe,EAAA,sEACyBrB,KAAKc,SAASW,KAAKL,EAAKI,EAASlB,GAD1D,uBACUiB,EADV,EACUA,KADV,kBAESA,GAFT,gD,kEDduB,CAAgB,CACvCG,QAHwB,4B,iBEkBbC,EAAmBC,YAC5B,mBAD4C,uCAE5C,WAAOxB,GAAP,qBAAAiB,EAAA,6DACQQ,GAAY,EADpB,kBAG8BjB,EAAUU,IAAV,gCAAuClB,EAAQ0B,MAA/C,qBAAiE1B,EAAQ2B,WAHvG,uBAGcC,EAHd,EAGcA,MACAC,EAAaD,EAAM7D,KAAI,SAACC,GAAD,oBAAgB,CACzCK,GAAE,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAMK,GACVyD,aAAY,iBAAE9D,QAAF,IAAEA,OAAF,EAAEA,EAAMK,UAAR,QAAc,IAC1B0D,SAAQ,iBAAE/D,QAAF,IAAEA,GAAF,UAAEA,EAAMgE,aAAR,aAAE,EAAaC,aAAf,QAAwB,IAChCC,gBAAe,iBAAElE,QAAF,IAAEA,OAAF,EAAEA,EAAMmE,mBAAR,QAAuB,IACtCC,MAAK,iBAAEpE,QAAF,IAAEA,OAAF,EAAEA,EAAMqE,wBAAR,QAA4B,IACjCC,YAAW,OAAEtE,QAAF,IAAEA,OAAF,EAAEA,EAAMsE,YACnBC,WAAYC,IAAK,OAACxE,QAAD,IAACA,OAAD,EAACA,EAAMuE,YAAYE,OAAO,sBAE/ChB,GAAY,EAbpB,kBAce,CAAEI,aAAYJ,cAd7B,kCAgBQA,GAAY,EAhBpB,0DAF4C,uDAsBnCiB,EAAkBlB,YAC3B,kBAD2C,uCAE3C,WAAOxB,GAAP,qBAAAiB,EAAA,6DACQQ,GAAY,EADpB,kBAG8BjB,EAAUU,IAAV,gCAAuClB,EAAQ0B,MAA/C,qBAAiE1B,EAAQ2B,SAAzE,iBAA0F3B,EAAQ2C,KAAlG,kBAAgH3C,EAAQ4C,QAHtJ,uBAGchB,EAHd,EAGcA,MACAC,EAAaD,EAAM7D,KAAI,SAACC,GAAD,oBAAgB,CACzCK,GAAE,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAMK,GACVyD,aAAY,iBAAE9D,QAAF,IAAEA,OAAF,EAAEA,EAAMK,UAAR,QAAc,IAC1B0D,SAAQ,iBAAE/D,QAAF,IAAEA,GAAF,UAAEA,EAAMgE,aAAR,aAAE,EAAaC,aAAf,QAAwB,IAChCC,gBAAe,iBAAElE,QAAF,IAAEA,OAAF,EAAEA,EAAMmE,mBAAR,QAAuB,IACtCC,MAAK,iBAAEpE,QAAF,IAAEA,OAAF,EAAEA,EAAMqE,wBAAR,QAA4B,IACjCC,YAAW,OAAEtE,QAAF,IAAEA,OAAF,EAAEA,EAAMsE,YACnBC,WAAYC,IAAK,OAACxE,QAAD,IAACA,OAAD,EAACA,EAAMuE,YAAYE,OAAO,sBAE/ChB,GAAY,EAbpB,kBAce,CAAEI,aAAYJ,cAd7B,kCAgBQA,GAAY,EAhBpB,0DAF2C,uDAuBlCoB,EAAkBC,YAAY,CACvCC,KAAM,aACNC,aArDiB,CACjB5F,KAAM,GACNqE,WAAW,GAoDXwB,SAAU,GAEVC,cAAe,SAACC,GACZA,EAAQC,QAAQV,EAAgBW,SAAS,SAACC,EAAOC,GAC7CD,EAAM7B,WAAY,KAEtB0B,EAAQC,QAAQV,EAAgBc,WAAW,SAACF,EAAOC,GAAgC,IAAD,IAC9ED,EAAMlG,KAAN,oBAAamG,EAAOnC,eAApB,aAAa,EAAgBS,kBAA7B,QAA2C,GAC3CyB,EAAM7B,WAAY,KAGtB0B,EAAQC,QAAQ7B,EAAiB8B,SAAS,SAACC,EAAOC,GAC9CD,EAAM7B,WAAY,KAEtB0B,EAAQC,QAAQ7B,EAAiBiC,WAAW,SAACF,EAAOC,GAAgC,IAAD,IAC/ED,EAAMlG,KAAN,oBAAamG,EAAOnC,eAApB,aAAa,EAAgBS,kBAA7B,QAA2C,GAC3CyB,EAAM7B,WAAY,QAQjBgC,EAAW,SAACH,GAAD,cAA0CA,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAOG,SAASrG,MACrEqE,EAAY,SAAC6B,GAAD,OAAmDA,EAAMG,SAAShC,WAE5EoB,IAAf,QC/EO,SAASa,IACZ,IAAMtG,EAAOuG,YAAYF,GACnBG,EAAUD,YAAYlC,GAFD,EAGIoC,mBAASxE,EAAS,GAAGhC,OAHzB,mBAGpByG,EAHoB,KAGRC,EAHQ,OAIHF,mBAAS,IAJN,mBAIpBG,EAJoB,KAIdC,EAJc,KAKrBC,EAAWC,cAEXC,EAAoBC,aACtB,SAACC,GAAW,IACUjH,EAAYiH,EAAtBC,OAAUlH,MAClB6G,EAAS3C,EAAiB,CAAEG,MAAOrE,EAAOsE,SAAUmC,KACpDG,EAAQ5G,KAEZ,IACA,CAAEmH,QAAS,MAST7H,EAAoB8H,uBACtB,SAACC,GACG,GAAsB,IAAlBA,EAAOC,OAAX,CACM,IAAD,EACuBD,EAAO,GAAvBnF,EADP,EACOA,MAAOoD,EADd,EACcA,KACfuB,EAASxB,EAAgB,CAAEhB,MAAOsC,EAAMrC,SAAUmC,EAAYlB,MAAOD,EAAMA,KAAMpD,QAGzF,CAACuE,EAAYE,EAAME,IAOvB,OAJAU,qBAAU,WACNV,EAAS3C,EAAiB,CAAEG,MAAO,GAAIC,SAAU,kBAClD,CAACuC,IAGA,gCACI,cAACtF,EAAD,CAAUrB,aAAc6G,IACxB,cAACjH,EAAD,CAAgBC,KAAMiC,EAAUhC,MAAOyG,EAAYvG,aAvBjC,SAAC+G,GACvBP,EAASO,EAAMC,OAAOlH,UAuBlB,cAACf,EAAD,CAAUmF,UAAWmC,EAASjH,kBAAmBA,EAAmBF,QAAS6C,EAAc9C,KAAMY,EAAMV,SAAU,O,sBC/ChHmI,EAAkB,CAC3B,CACI9B,KAAM,eACN+B,GAAI,cAACpB,EAAD,IACJqB,KAAM,IACNC,KAAM,cAAC,IAAD,M,OCJC,SAASC,IAAc,IAAD,EACTpB,oBAAS,GADA,mBAC1BqB,EAD0B,KACpBC,EADoB,KAEjC,OACI,cAAC,UAAD,CAAMC,OAAQF,EACVG,cAAe,SAAC/B,GAAD,OAAW6B,EAAQ7B,EAAM8B,SACxCE,WAAY,YAFhB,gBAGKT,QAHL,IAGKA,OAHL,EAGKA,EAAQ9G,KAAI,SAACC,EAAYuH,GAAb,OACT,gCACKvH,EAAKgH,KACN,cAAC,IAAD,CAAkBF,GAAI,CAAEU,SAAUxH,EAAK+G,MAAQU,QAAS,kBAAMN,GAAQ,IAAtE,SAA+EnH,EAAK+E,MAAzEwC,KAFLA,QCEXG,MAff,WACI,OACI,mCACI,eAAC,IAAD,WACI,cAACT,EAAD,IACA,sBAAM5G,GAAG,YAAT,SACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAO0G,KAAK,IAAItH,UAAWiG,cCXtCiC,EAAQC,YAAe,CAChCC,QAAS,CACLpC,SAAUqC,KCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRY,SAASC,eAAe,QD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC5G,GACN6G,QAAQ7G,MAAMA,EAAM8G,c","file":"static/js/main.bcfd9fe3.chunk.js","sourcesContent":["import React from 'react';\nimport { DataGrid } from '@material-ui/data-grid';\nimport { makeStyles } from '@material-ui/core/styles';\n\ninterface TableItem {\n    rows: [object],\n    columns: ColumnItem[],\n    pageSize: number,\n    handleModelChange: any,\n    isLoading?: boolean;\n}\ninterface ColumnItem {\n    field: string,\n    headerName: string,\n    width: number,\n}\n\nconst useStyles = makeStyles((theme) => ({\n    size: {\n        height: 400,\n        width: '100%',\n    },\n    root: {\n        backgroundColor: \"#fff\",\n        boxShadow: 'rgba(0, 0, 0, 0.07) 0px 1px 1px, rgba(0, 0, 0, 0.07) 0px 2px 2px, rgba(0, 0, 0, 0.07) 0px 4px 4px, rgba(0, 0, 0, 0.07) 0px 8px 8px, rgba(0, 0, 0, 0.07) 0px 16px 16px'\n    }\n}));\n\nexport default function TheTable(props: TableItem) {\n    const { rows, columns, pageSize, handleModelChange } = props;\n\n    const classes = useStyles();\n\n\n    return (\n        <div className={classes.size}>\n            <DataGrid\n                className={classes.root}\n                rows={rows}\n                columns={columns}\n                pageSize={pageSize}\n                onSortModelChange={handleModelChange}\n                sortingOrder={['asc', 'desc']}\n                sortingMode=\"server\"\n                disableColumnSelector\n                disableColumnMenu\n            />\n        </div>\n    );\n}","import React, { ChangeEvent } from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\ninterface Item {\n    id: string,\n    value: string;\n}\ninterface Props {\n    list: any,\n    value: string,\n    title?: string,\n    handleChange: (e: ChangeEvent<HTMLInputElement>) => void;\n}\n\nexport default function TheRadioButton(props: Props) {\n\n    const { list, value, title, handleChange } = props;\n\n    return (\n        <FormControl component=\"fieldset\">\n            <RadioGroup row aria-label={title} value={value} onChange={handleChange} data-testid=\"the-radio-button\">\n                {list.map((item: Item) => (\n                    <FormControlLabel key={item.id} value={item.value} control={<Radio />} label={item.value} />\n                ))}\n            </RadioGroup>\n        </FormControl>\n    );\n}","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1),\n            width: '25ch',\n        },\n        backgroundColor: \"#fff\",\n        marginTop: 8,\n        marginBottom: 16,\n        borderRadius: 8,\n        padding: 4\n    },\n}));\n\nexport default function TheInput(props: any) {\n    const classes = useStyles();\n\n    return (\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n                <TextField inputProps={{ \"data-testid\": \"content-input\" }}\n                    data-testid=\"the-input\" label=\"Search repo\" variant=\"outlined\" onChange={props.handleChange} />\n            </form>\n        </div>\n    );\n}","export const langList = [\n    {\n        id: 1,\n        value: 'Javascript'\n    },\n    {\n        id: 2,\n        value: 'Python'\n    },\n    {\n        id: 3,\n        value: 'Scala'\n    },\n];\n\nexport const tableColumns = [\n    {\n        field: 'repositoryId',\n        headerName: 'Repository ID',\n        width: 180,\n        sortable: false\n    },\n    {\n        field: 'userName',\n        headerName: 'Username',\n        width: 150,\n        sortable: false\n    },\n    {\n        field: 'repoDescription',\n        headerName: 'Repo Description',\n        width: 210,\n        sortable: false\n    },\n    {\n        field: 'stars',\n        headerName: 'Stars',\n        width: 150,\n    },\n    {\n        field: 'forks_count',\n        headerName: 'Forks',\n        width: 150,\n    },\n    {\n        field: 'updated_at',\n        headerName: 'Last Update Date',\n        width: 200,\n    },\n];","export default class Interceptor {\n  constructor(axiosObject) {\n    this.requestInterceptor = null;\n    this.responseInterceptor = null;\n    this.axiosObject = axiosObject;\n  }\n\n  setRequestInterceptor() {\n    this.requestInterceptor = this.axiosObject.interceptors.request.use(\n      (config) => config,\n      (error) => Promise.reject(error)\n    );\n  }\n\n  setResponseInterceptor() {\n    this.responseInterceptor = this.axiosObject.interceptors.response.use(\n      (response) => response,\n      ({ response: error }) => Promise.reject(error)\n    );\n  }\n\n  removeRequestInterceptor() {\n    this.axiosObject.interceptors.request.eject(this.requestInterceptor);\n  }\n\n  removeResponseInterceptor() {\n    this.axiosObject.interceptors.response.eject(this.responseInterceptor);\n  }\n}\n","import HttpService from \"./HttpService\";\n\nconst githubApiEndpoint = \"https://api.github.com/\";\n\nexport const githubApi = new HttpService({\n  baseURL: githubApiEndpoint,\n});\n","import axios from 'axios';\n\nimport Interceptor from './InterceptorService';\n\nclass HttpService {\n  constructor(options) {\n    this.instance = axios.create(options);\n    this.interceptor = new Interceptor(this.instance);\n\n    this.interceptor.setRequestInterceptor();\n    this.interceptor.setResponseInterceptor();\n  }\n\n  async get(url, config) {\n    const { data } = await this.instance.get(url, config);\n    return data;\n  }\n\n  async post(url, payload, config) {\n    const { data } = await this.instance.post(url, payload, config);\n    return data;\n  }\n}\n\nexport default HttpService;\n","import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { githubApi } from '../../app/services/ApiService';\nimport dayjs from 'dayjs';\n\ninterface Request {\n    query?: string,\n    language?: string;\n    sort?: string;\n    order?: string;\n}\n\ntype OpenSnackbarAction = PayloadAction<any>;\n\n\nconst initialState = {\n    list: [],\n    isLoading: false\n};\n\n\nexport const fetchRepoByQuery = createAsyncThunk(\n    'repository/query',\n    async (request: Request) => {\n        let isLoading = true;\n        try {\n            let { items } = await githubApi.get(`search/repositories?q=${request.query}+language:${request.language}`);\n            const filterList = items.map((item: any) => ({\n                id: item?.id,\n                repositoryId: item?.id ?? '-',\n                userName: item?.owner?.login ?? '-',\n                repoDescription: item?.description ?? '-',\n                stars: item?.stargazers_count ?? '-',\n                forks_count: item?.forks_count,\n                updated_at: dayjs(item?.updated_at).format('MMM/YYYY-HH:mm')\n            }));\n            isLoading = false;\n            return { filterList, isLoading };\n        } catch (error) {\n            isLoading = false;\n        }\n    }\n);\nexport const fetchRepoBySort = createAsyncThunk(\n    'repository/sort',\n    async (request: Request) => {\n        let isLoading = true;\n        try {\n            let { items } = await githubApi.get(`search/repositories?q=${request.query}+language:${request.language}&sort=${request.sort}&order=${request.order}`);\n            const filterList = items.map((item: any) => ({\n                id: item?.id,\n                repositoryId: item?.id ?? '-',\n                userName: item?.owner?.login ?? '-',\n                repoDescription: item?.description ?? '-',\n                stars: item?.stargazers_count ?? '-',\n                forks_count: item?.forks_count,\n                updated_at: dayjs(item?.updated_at).format('MMM/YYYY-HH:mm')\n            }));\n            isLoading = false;\n            return { filterList, isLoading };\n        } catch (error) {\n            isLoading = false;\n        }\n    }\n);\n\nexport const repositorySlice = createSlice({\n    name: \"repository\",\n    initialState,\n    reducers: {\n    },\n    extraReducers: (builder) => {\n        builder.addCase(fetchRepoBySort.pending, (state, action: OpenSnackbarAction) => {\n            state.isLoading = true;\n        });\n        builder.addCase(fetchRepoBySort.fulfilled, (state, action: OpenSnackbarAction) => {\n            state.list = action.payload?.filterList ?? [];\n            state.isLoading = false;\n        });\n\n        builder.addCase(fetchRepoByQuery.pending, (state, action: OpenSnackbarAction) => {\n            state.isLoading = true;\n        });\n        builder.addCase(fetchRepoByQuery.fulfilled, (state, action: OpenSnackbarAction) => {\n            state.list = action.payload?.filterList ?? [];\n            state.isLoading = false;\n        });\n    },\n});\n\n\n\n\nexport const repoList = (state: { repoList: { list: any; }; }) => state?.repoList.list;\nexport const isLoading = (state: { repoList: { isLoading: boolean; }; }) => state.repoList.isLoading;\n\nexport default repositorySlice.reducer;","import React, { useEffect, useState, useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport TheTable from \"../../app/components/TheTable/TheTable\";\nimport TheRadioButton from \"../../app/components/TheRadioButton/TheRadioButton\";\nimport TheInput from \"../../app/components/TheInput/TheInput\";\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport { langList, tableColumns } from '../../app/constants';\nimport {\n    fetchRepoByQuery,\n    fetchRepoBySort,\n    repoList,\n    isLoading\n} from \"./repositorySlice\";\n\nexport function Repositories() {\n    const list = useSelector(repoList);\n    const loading = useSelector(isLoading);\n    const [radioValue, setValue] = useState(langList[0].value);\n    const [text, setText] = useState(\"\");\n    const dispatch = useDispatch();\n\n    const handleInputChange = useDebouncedCallback(\n        (event) => {\n            const { target: { value } } = event;\n            dispatch(fetchRepoByQuery({ query: value, language: radioValue }));\n            setText(value);\n        },\n        300,\n        { maxWait: 2000 }\n    );\n\n\n    const handleRadioChange = (event: { target: { value: string | any; }; }) => {\n        setValue(event.target.value);\n    };\n\n\n    const handleModelChange = useCallback(\n        (params: any) => {\n            if (params.length === 0) return;\n            else {\n                const { field, sort } = params[0];\n                dispatch(fetchRepoBySort({ query: text, language: radioValue, order: sort, sort: field }));\n            }\n        },\n        [radioValue, text, dispatch],\n    );\n\n    useEffect(() => {\n        dispatch(fetchRepoByQuery({ query: \"\", language: 'javascript' }));\n    }, [dispatch]);\n\n    return (\n        <div>\n            <TheInput handleChange={handleInputChange} />\n            <TheRadioButton list={langList} value={radioValue} handleChange={handleRadioChange} />\n            <TheTable isLoading={loading} handleModelChange={handleModelChange} columns={tableColumns} rows={list} pageSize={5} />\n        </div>\n    );\n}\n","import React from 'react';\nimport { Repositories } from '../../features/repositories/Repositories';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\ninterface Route {\n    name: string,\n    to: React.ReactChild,\n    path: string,\n    icon: React.ReactChild;\n}\n\nexport const routes: Route[] = [\n    {\n        name: 'Repositories',\n        to: <Repositories />,\n        path: '/',\n        icon: <GitHubIcon />\n    },\n];","import React, { useState } from 'react';\nimport { elastic as Menu } from 'react-burger-menu';\nimport { Link } from 'react-router-dom';\nimport { routes } from '../../router';\nimport '../../assets/scss/sidebar.scss';\ninterface Item {\n    id?: string;\n    name?: string;\n    path?: string;\n    icon?: React.ReactChild;\n};\n\nexport default function TheSidebar() {\n    const [open, setOpen] = useState(false);\n    return (\n        <Menu isOpen={open}\n            onStateChange={(state) => setOpen(state.isOpen)}\n            pageWrapId={\"page-wrap\"}>\n            {routes?.map((item: Item, index: number) => (\n                <div key={index}>\n                    {item.icon}\n                    <Link key={index} to={{ pathname: item.path }} onClick={() => setOpen(false)}>{item.name}</Link>\n                </div>\n            ))}\n        </Menu>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport TheSidebar from './app/components/TheSidebar/TheSidebar';\nimport { Repositories } from './features/repositories/Repositories';\n\nfunction App() {\n    return (\n        <>\n            <Router>\n                <TheSidebar />\n                <main id=\"page-wrap\">\n                    <Switch>\n                        <Route path=\"/\" component={Repositories} />\n                    </Switch>\n                </main>\n            </Router>\n        </>\n    );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport repositoryReducer from '../../features/repositories/repositorySlice'\nexport const store = configureStore({\n    reducer: {\n        repoList: repositoryReducer,\n    },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { store } from './app/store/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('app')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}